
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN ELSE EQ GE GT IDENTIFIER IF LBRACE LE LPAREN LT MINUS NEQ NUMBER PLUS RBRACE RPAREN SEMICOLONifelse : IF LPAREN condition RPAREN block else_partelse_part : ELSE block\n| emptycondition : expression EQ expression\n| expression NEQ expression\n| expression LT expression\n| expression GT expression\n| expression LE expression\n| expression GE expressionexpression : IDENTIFIER\n| NUMBER\n| IDENTIFIER PLUS NUMBER\n| IDENTIFIER MINUS NUMBERassignment : IDENTIFIER ASSIGN expression SEMICOLONblock : LBRACE statement_list RBRACEstatement_list : statement\n| statement_list statementstatement : assignment\n| ifelseempty :'
    
_lr_action_items = {'IF':([0,17,18,27,29,30,31,32,33,35,36,37,40,],[2,-20,2,-1,-3,2,-16,-18,-19,-2,-15,-17,-14,]),'$end':([1,17,27,29,35,36,],[0,-20,-1,-3,-2,-15,]),'LPAREN':([2,],[3,]),'IDENTIFIER':([3,9,10,11,12,13,14,17,18,27,29,30,31,32,33,35,36,37,38,40,],[6,6,6,6,6,6,6,-20,34,-1,-3,34,-16,-18,-19,-2,-15,-17,6,-14,]),'NUMBER':([3,9,10,11,12,13,14,15,16,38,],[7,7,7,7,7,7,7,25,26,7,]),'RPAREN':([4,6,7,19,20,21,22,23,24,25,26,],[8,-10,-11,-4,-5,-6,-7,-8,-9,-12,-13,]),'EQ':([5,6,7,25,26,],[9,-10,-11,-12,-13,]),'NEQ':([5,6,7,25,26,],[10,-10,-11,-12,-13,]),'LT':([5,6,7,25,26,],[11,-10,-11,-12,-13,]),'GT':([5,6,7,25,26,],[12,-10,-11,-12,-13,]),'LE':([5,6,7,25,26,],[13,-10,-11,-12,-13,]),'GE':([5,6,7,25,26,],[14,-10,-11,-12,-13,]),'SEMICOLON':([6,7,25,26,39,],[-10,-11,-12,-13,40,]),'PLUS':([6,],[15,]),'MINUS':([6,],[16,]),'LBRACE':([8,28,],[18,18,]),'ELSE':([17,36,],[28,-15,]),'RBRACE':([17,27,29,30,31,32,33,35,36,37,40,],[-20,-1,-3,36,-16,-18,-19,-2,-15,-17,-14,]),'ASSIGN':([34,],[38,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ifelse':([0,18,30,],[1,33,33,]),'condition':([3,],[4,]),'expression':([3,9,10,11,12,13,14,38,],[5,19,20,21,22,23,24,39,]),'block':([8,28,],[17,35,]),'else_part':([17,],[27,]),'empty':([17,],[29,]),'statement_list':([18,],[30,]),'statement':([18,30,],[31,37,]),'assignment':([18,30,],[32,32,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ifelse","S'",1,None,None,None),
  ('ifelse -> IF LPAREN condition RPAREN block else_part','ifelse',6,'p_ifelse','afll5.py',67),
  ('else_part -> ELSE block','else_part',2,'p_else_part','afll5.py',71),
  ('else_part -> empty','else_part',1,'p_else_part','afll5.py',72),
  ('condition -> expression EQ expression','condition',3,'p_condition','afll5.py',76),
  ('condition -> expression NEQ expression','condition',3,'p_condition','afll5.py',77),
  ('condition -> expression LT expression','condition',3,'p_condition','afll5.py',78),
  ('condition -> expression GT expression','condition',3,'p_condition','afll5.py',79),
  ('condition -> expression LE expression','condition',3,'p_condition','afll5.py',80),
  ('condition -> expression GE expression','condition',3,'p_condition','afll5.py',81),
  ('expression -> IDENTIFIER','expression',1,'p_expression','afll5.py',85),
  ('expression -> NUMBER','expression',1,'p_expression','afll5.py',86),
  ('expression -> IDENTIFIER PLUS NUMBER','expression',3,'p_expression','afll5.py',87),
  ('expression -> IDENTIFIER MINUS NUMBER','expression',3,'p_expression','afll5.py',88),
  ('assignment -> IDENTIFIER ASSIGN expression SEMICOLON','assignment',4,'p_assignment','afll5.py',93),
  ('block -> LBRACE statement_list RBRACE','block',3,'p_block','afll5.py',97),
  ('statement_list -> statement','statement_list',1,'p_statement_list','afll5.py',101),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','afll5.py',102),
  ('statement -> assignment','statement',1,'p_statement','afll5.py',106),
  ('statement -> ifelse','statement',1,'p_statement','afll5.py',107),
  ('empty -> <empty>','empty',0,'p_empty','afll5.py',111),
]
